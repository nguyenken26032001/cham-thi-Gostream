import "./chunk-K6OQ7IHW.js";
import {
  CalendarApi,
  CalendarContent,
  CalendarDataManager,
  CalendarRoot,
  CustomContentRenderContext,
  DelayedRunner,
  applyStyleProp,
  createElement,
  flushSync,
  isArraysEqual,
  render,
  unmountComponentAtNode
} from "./chunk-6D5SEJIO.js";
import {
  __assign,
  __extends
} from "./chunk-EXAMLBMZ.js";
import {
  createElementBlock,
  openBlock
} from "./chunk-3NMN3MUW.js";
import "./chunk-RSJERJUL.js";

// node_modules/@fullcalendar/core/main.js
var Calendar = (
  /** @class */
  function(_super) {
    __extends(Calendar2, _super);
    function Calendar2(el, optionOverrides) {
      if (optionOverrides === void 0) {
        optionOverrides = {};
      }
      var _this = _super.call(this) || this;
      _this.isRendering = false;
      _this.isRendered = false;
      _this.currentClassNames = [];
      _this.customContentRenderId = 0;
      _this.handleAction = function(action) {
        switch (action.type) {
          case "SET_EVENT_DRAG":
          case "SET_EVENT_RESIZE":
            _this.renderRunner.tryDrain();
        }
      };
      _this.handleData = function(data) {
        _this.currentData = data;
        _this.renderRunner.request(data.calendarOptions.rerenderDelay);
      };
      _this.handleRenderRequest = function() {
        if (_this.isRendering) {
          _this.isRendered = true;
          var currentData_1 = _this.currentData;
          flushSync(function() {
            render(createElement(CalendarRoot, { options: currentData_1.calendarOptions, theme: currentData_1.theme, emitter: currentData_1.emitter }, function(classNames, height, isHeightAuto, forPrint) {
              _this.setClassNames(classNames);
              _this.setHeight(height);
              return createElement(
                CustomContentRenderContext.Provider,
                { value: _this.customContentRenderId },
                createElement(CalendarContent, __assign({ isHeightAuto, forPrint }, currentData_1))
              );
            }), _this.el);
          });
        } else if (_this.isRendered) {
          _this.isRendered = false;
          unmountComponentAtNode(_this.el);
          _this.setClassNames([]);
          _this.setHeight("");
        }
      };
      _this.el = el;
      _this.renderRunner = new DelayedRunner(_this.handleRenderRequest);
      new CalendarDataManager({
        optionOverrides,
        calendarApi: _this,
        onAction: _this.handleAction,
        onData: _this.handleData
      });
      return _this;
    }
    Object.defineProperty(Calendar2.prototype, "view", {
      get: function() {
        return this.currentData.viewApi;
      },
      enumerable: false,
      configurable: true
    });
    Calendar2.prototype.render = function() {
      var wasRendering = this.isRendering;
      if (!wasRendering) {
        this.isRendering = true;
      } else {
        this.customContentRenderId += 1;
      }
      this.renderRunner.request();
      if (wasRendering) {
        this.updateSize();
      }
    };
    Calendar2.prototype.destroy = function() {
      if (this.isRendering) {
        this.isRendering = false;
        this.renderRunner.request();
      }
    };
    Calendar2.prototype.updateSize = function() {
      var _this = this;
      flushSync(function() {
        _super.prototype.updateSize.call(_this);
      });
    };
    Calendar2.prototype.batchRendering = function(func) {
      this.renderRunner.pause("batchRendering");
      func();
      this.renderRunner.resume("batchRendering");
    };
    Calendar2.prototype.pauseRendering = function() {
      this.renderRunner.pause("pauseRendering");
    };
    Calendar2.prototype.resumeRendering = function() {
      this.renderRunner.resume("pauseRendering", true);
    };
    Calendar2.prototype.resetOptions = function(optionOverrides, append) {
      this.currentDataManager.resetOptions(optionOverrides, append);
    };
    Calendar2.prototype.setClassNames = function(classNames) {
      if (!isArraysEqual(classNames, this.currentClassNames)) {
        var classList = this.el.classList;
        for (var _i = 0, _a = this.currentClassNames; _i < _a.length; _i++) {
          var className = _a[_i];
          classList.remove(className);
        }
        for (var _b = 0, classNames_1 = classNames; _b < classNames_1.length; _b++) {
          var className = classNames_1[_b];
          classList.add(className);
        }
        this.currentClassNames = classNames;
      }
    };
    Calendar2.prototype.setHeight = function(height) {
      applyStyleProp(this.el, "height", height);
    };
    return Calendar2;
  }(CalendarApi)
);

// node_modules/primevue/fullcalendar/fullcalendar.esm.js
var script = {
  name: "FullCalendar",
  props: {
    events: Array,
    options: null
  },
  calendar: null,
  watch: {
    events(value) {
      if (value && this.calendar) {
        this.calendar.removeAllEventSources();
        this.calendar.addEventSource(value);
      }
    },
    options(value) {
      if (value && this.calendar) {
        for (let prop in value) {
          this.calendar.setOption(prop, value[prop]);
        }
      }
    }
  },
  mounted() {
    if (this.$el.offsetParent) {
      this.initialize();
    }
  },
  updated() {
    if (!this.calendar && this.$el.offsetParent) {
      this.initialize();
    }
  },
  beforeUnmount() {
    if (this.calendar) {
      this.calendar.destroy();
      this.calendar = null;
    }
  },
  methods: {
    initialize() {
      let defaultConfig = { themeSystem: "standard" };
      let config = this.options ? { ...this.options, ...defaultConfig } : defaultConfig;
      this.calendar = new Calendar(this.$el, config);
      this.calendar.render();
      if (this.events) {
        this.calendar.removeAllEventSources();
        this.calendar.addEventSource(this.events);
      }
    }
  }
};
function render2(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createElementBlock("div");
}
script.render = render2;
export {
  script as default
};
/*! Bundled license information:

@fullcalendar/core/main.js:
  (*!
  FullCalendar v5.11.4
  Docs & License: https://fullcalendar.io/
  (c) 2022 Adam Shaw
  *)
*/
//# sourceMappingURL=primevue_fullcalendar.js.map
