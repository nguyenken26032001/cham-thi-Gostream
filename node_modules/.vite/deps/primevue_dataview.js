import {
  script
} from "./chunk-SN2FDNIN.js";
import "./chunk-I4N5QGTL.js";
import "./chunk-NIRV6ZOD.js";
import "./chunk-ATDKYOH7.js";
import "./chunk-64UQO2RQ.js";
import "./chunk-ZGA3NKUM.js";
import "./chunk-7AENWJPC.js";
import "./chunk-B74DQCZ5.js";
import "./chunk-MA43FZBS.js";
import "./chunk-2IYL7RL2.js";
import {
  Fragment,
  createBaseVNode,
  createBlock,
  createCommentVNode,
  createElementBlock,
  createSlots,
  normalizeClass,
  openBlock,
  renderList,
  renderSlot,
  resolveComponent,
  withCtx
} from "./chunk-3NMN3MUW.js";
import {
  ObjectUtils
} from "./chunk-34IKHZHP.js";
import "./chunk-RSJERJUL.js";

// node_modules/primevue/dataview/dataview.esm.js
var script2 = {
  name: "DataView",
  emits: ["update:first", "update:rows", "page"],
  props: {
    value: {
      type: Array,
      default: null
    },
    layout: {
      type: String,
      default: "list"
    },
    rows: {
      type: Number,
      default: 0
    },
    first: {
      type: Number,
      default: 0
    },
    totalRecords: {
      type: Number,
      default: 0
    },
    paginator: {
      type: Boolean,
      default: false
    },
    paginatorPosition: {
      type: String,
      default: "bottom"
    },
    alwaysShowPaginator: {
      type: Boolean,
      default: true
    },
    paginatorTemplate: {
      type: String,
      default: "FirstPageLink PrevPageLink PageLinks NextPageLink LastPageLink RowsPerPageDropdown"
    },
    pageLinkSize: {
      type: Number,
      default: 5
    },
    rowsPerPageOptions: {
      type: Array,
      default: null
    },
    currentPageReportTemplate: {
      type: String,
      default: "({currentPage} of {totalPages})"
    },
    sortField: {
      type: [String, Function],
      default: null
    },
    sortOrder: {
      type: Number,
      default: null
    },
    lazy: {
      type: Boolean,
      default: false
    },
    dataKey: {
      type: String,
      default: null
    }
  },
  data() {
    return {
      d_first: this.first,
      d_rows: this.rows
    };
  },
  watch: {
    first(newValue) {
      this.d_first = newValue;
    },
    rows(newValue) {
      this.d_rows = newValue;
    },
    sortField() {
      this.resetPage();
    },
    sortOrder() {
      this.resetPage();
    }
  },
  methods: {
    getKey(item, index) {
      return this.dataKey ? ObjectUtils.resolveFieldData(item, this.dataKey) : index;
    },
    onPage(event) {
      this.d_first = event.first;
      this.d_rows = event.rows;
      this.$emit("update:first", this.d_first);
      this.$emit("update:rows", this.d_rows);
      this.$emit("page", event);
    },
    sort() {
      if (this.value) {
        const value = [...this.value];
        value.sort((data1, data2) => {
          let value1 = ObjectUtils.resolveFieldData(data1, this.sortField);
          let value2 = ObjectUtils.resolveFieldData(data2, this.sortField);
          let result = null;
          if (value1 == null && value2 != null)
            result = -1;
          else if (value1 != null && value2 == null)
            result = 1;
          else if (value1 == null && value2 == null)
            result = 0;
          else if (typeof value1 === "string" && typeof value2 === "string")
            result = value1.localeCompare(value2, void 0, { numeric: true });
          else
            result = value1 < value2 ? -1 : value1 > value2 ? 1 : 0;
          return this.sortOrder * result;
        });
        return value;
      } else {
        return null;
      }
    },
    resetPage() {
      this.d_first = 0;
      this.$emit("update:first", this.d_first);
    }
  },
  computed: {
    containerClass() {
      return [
        "p-dataview p-component",
        {
          "p-dataview-list": this.layout === "list",
          "p-dataview-grid": this.layout === "grid"
        }
      ];
    },
    getTotalRecords() {
      if (this.totalRecords)
        return this.totalRecords;
      else
        return this.value ? this.value.length : 0;
    },
    empty() {
      return !this.value || this.value.length === 0;
    },
    paginatorTop() {
      return this.paginator && (this.paginatorPosition !== "bottom" || this.paginatorPosition === "both");
    },
    paginatorBottom() {
      return this.paginator && (this.paginatorPosition !== "top" || this.paginatorPosition === "both");
    },
    items() {
      if (this.value && this.value.length) {
        let data = this.value;
        if (data && data.length && this.sortField) {
          data = this.sort();
        }
        if (this.paginator) {
          const first = this.lazy ? 0 : this.d_first;
          return data.slice(first, first + this.d_rows);
        } else {
          return data;
        }
      } else {
        return null;
      }
    }
  },
  components: {
    DVPaginator: script
  }
};
var _hoisted_1 = {
  key: 0,
  class: "p-dataview-header"
};
var _hoisted_2 = { class: "p-dataview-content" };
var _hoisted_3 = { class: "p-grid p-nogutter grid grid-nogutter" };
var _hoisted_4 = {
  key: 0,
  class: "p-col col"
};
var _hoisted_5 = { class: "p-dataview-emptymessage" };
var _hoisted_6 = {
  key: 3,
  class: "p-dataview-footer"
};
function render(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_DVPaginator = resolveComponent("DVPaginator");
  return openBlock(), createElementBlock("div", {
    class: normalizeClass($options.containerClass)
  }, [
    _ctx.$slots.header ? (openBlock(), createElementBlock("div", _hoisted_1, [
      renderSlot(_ctx.$slots, "header")
    ])) : createCommentVNode("", true),
    $options.paginatorTop ? (openBlock(), createBlock(_component_DVPaginator, {
      key: 1,
      rows: $data.d_rows,
      first: $data.d_first,
      totalRecords: $options.getTotalRecords,
      pageLinkSize: $props.pageLinkSize,
      template: $props.paginatorTemplate,
      rowsPerPageOptions: $props.rowsPerPageOptions,
      currentPageReportTemplate: $props.currentPageReportTemplate,
      class: normalizeClass({ "p-paginator-top": $options.paginatorTop }),
      alwaysShow: $props.alwaysShowPaginator,
      onPage: _cache[0] || (_cache[0] = ($event) => $options.onPage($event))
    }, createSlots({ _: 2 }, [
      _ctx.$slots.paginatorstart ? {
        name: "start",
        fn: withCtx(() => [
          renderSlot(_ctx.$slots, "paginatorstart")
        ]),
        key: "0"
      } : void 0,
      _ctx.$slots.paginatorend ? {
        name: "end",
        fn: withCtx(() => [
          renderSlot(_ctx.$slots, "paginatorend")
        ]),
        key: "1"
      } : void 0
    ]), 1032, ["rows", "first", "totalRecords", "pageLinkSize", "template", "rowsPerPageOptions", "currentPageReportTemplate", "class", "alwaysShow"])) : createCommentVNode("", true),
    createBaseVNode("div", _hoisted_2, [
      createBaseVNode("div", _hoisted_3, [
        (openBlock(true), createElementBlock(Fragment, null, renderList($options.items, (item, index) => {
          return openBlock(), createElementBlock(Fragment, {
            key: $options.getKey(item, index)
          }, [
            _ctx.$slots.list && $props.layout === "list" ? renderSlot(_ctx.$slots, "list", {
              key: 0,
              data: item,
              index
            }) : createCommentVNode("", true),
            _ctx.$slots.grid && $props.layout === "grid" ? renderSlot(_ctx.$slots, "grid", {
              key: 1,
              data: item,
              index
            }) : createCommentVNode("", true)
          ], 64);
        }), 128)),
        $options.empty ? (openBlock(), createElementBlock("div", _hoisted_4, [
          createBaseVNode("div", _hoisted_5, [
            renderSlot(_ctx.$slots, "empty")
          ])
        ])) : createCommentVNode("", true)
      ])
    ]),
    $options.paginatorBottom ? (openBlock(), createBlock(_component_DVPaginator, {
      key: 2,
      rows: $data.d_rows,
      first: $data.d_first,
      totalRecords: $options.getTotalRecords,
      pageLinkSize: $props.pageLinkSize,
      template: $props.paginatorTemplate,
      rowsPerPageOptions: $props.rowsPerPageOptions,
      currentPageReportTemplate: $props.currentPageReportTemplate,
      class: normalizeClass({ "p-paginator-bottom": $options.paginatorBottom }),
      alwaysShow: $props.alwaysShowPaginator,
      onPage: _cache[1] || (_cache[1] = ($event) => $options.onPage($event))
    }, createSlots({ _: 2 }, [
      _ctx.$slots.paginatorstart ? {
        name: "start",
        fn: withCtx(() => [
          renderSlot(_ctx.$slots, "paginatorstart")
        ]),
        key: "0"
      } : void 0,
      _ctx.$slots.paginatorend ? {
        name: "end",
        fn: withCtx(() => [
          renderSlot(_ctx.$slots, "paginatorend")
        ]),
        key: "1"
      } : void 0
    ]), 1032, ["rows", "first", "totalRecords", "pageLinkSize", "template", "rowsPerPageOptions", "currentPageReportTemplate", "class", "alwaysShow"])) : createCommentVNode("", true),
    _ctx.$slots.footer ? (openBlock(), createElementBlock("div", _hoisted_6, [
      renderSlot(_ctx.$slots, "footer")
    ])) : createCommentVNode("", true)
  ], 2);
}
script2.render = render;
export {
  script2 as default
};
//# sourceMappingURL=primevue_dataview.js.map
